"""
Django settings for Hypernet project.

Generated by 'django-admin startproject' using Django 1.11.5.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""

import os, datetime
from dotenv import load_dotenv

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


load_dotenv(os.path.join(os.path.dirname(os.path.dirname(__file__)), ".env"))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '+dio%*kh6w@$rgd4#p&s%kng6%o86h*e&l$bqn)99*g+d@%es8'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False
TESTS = DEBUG  # disable it for production - hides tests urls

ALLOWED_HOSTS = ['*']
# Application definition

# CORS PROPERTY
CORS_ORIGIN_ALLOW_ALL = True
CORS_ALLOW_HEADERS = [
    "Access-Control-Allow-Origin",
    "accept",
    "accept-encoding",
    "authorization",
    "content-type",
    "dnt",
    "origin",
    "user-agent",
    "x-csrftoken",
    "x-requested-with",
]

CORS_ALLOW_METHODS = [
    "DELETE",
    "GET",
    "OPTIONS",
    "PATCH",
    "POST",
    "PUT",
]

INSTALLED_APPS = [

    'django_crontab',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    'rest_framework',
    'rest_framework.authtoken',
    'rest_framework_docs',
    'corsheaders',
    'hypernet',
    'user',
    'customer',
    'options',
    'backend',
    'ioa',
    'iof',
    'ppp',
    'ffp',
    'iop',
    'invitations',
    'modeltranslation',
    'django_twilio',
    'django_unused_media',
    'email_manager',
]

SITE_ID = 1

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]


ROOT_URLCONF = 'backend.urls'
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR, 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]
from django.middleware.common import CommonMiddleware
WSGI_APPLICATION = 'backend.wsgi.application'


# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

# LANGUAGE_CODE = 'en-us'

from hypernet.constants import ENGLISH, FRENCH
gettext = lambda s: s
LANGUAGES = (
    ('en', gettext(ENGLISH)),
    ('fr', gettext(FRENCH)),
             )

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

AUTH_USER_MODEL = 'user.User'

ENTITY_MODEL = 'hypernet.Entity'


DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': os.environ.get('DATABASE_NAME'),
        'USER': os.environ.get('DATABASE_USER'),
        'PASSWORD': os.environ.get('DATABASE_PASSWORD'),
        'HOST': os.environ.get('DATABASE_HOST'),
        'PORT': os.environ.get('DATABASE_PORT'),
    }
}

# One Signal rest api key
# ONE_SIGNAL_REST_API_KEY_NEW_TAGS = 'N2ViMTRmZDgtMjc0OC00YzFkLWIzYTAtZGRmN2Y2MDFmNTFk'

REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
        #'rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly',
        #'customer.permissions.SuperUserPermission'
    ),
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.TokenAuthentication',
        # 'rest_framework.authentication.SessionAuthentication',
        #'rest_framework.authentication.BasicAuthentication',
    ),
    'DATETIME_FORMAT': "%Y-%m-%dT%H:%M:%SZ",
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination',
}


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, "static/")
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "local_static/"),
    # "internet_of_things",
]
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, "media")

# SITE_ID = 1R

EMAIL_HOST = 'smtpout.asia.secureserver.net'
EMAIL_HOST_USER = 'support@hypernymbiz.com'
EMAIL_HOST_PASSWORD = 'hypernymbiz123'
EMAIL_PORT = 25
EMAIL_USE_TLS = False
PYDEVD_USE_FRAME_EVAL = False



TWILIO_ACCOUNT_SID = 'AC5a37455e0a5492d79f53e0c33c101481'
TWILIO_AUTH_TOKEN = '741012dba2322cc6b70f3de90d39d575'

DATABASE_ROUTERS = ['hypernet.dbrouter.HypernetProxyDBRouter']

GOOGLE_API_KEY = 'AIzaSyCM5E1Osn3jwG6HaqsWyB_T38foamltUfc'

# try:
#     from .local_settings import *
#
#     INSTALLED_APPS += LOCAL_INSTALLED_APPS
# except ImportError:
#     pass

# ----------------------------------- Celery Configurations -------------------------------
# BROKER_URL = 'django://' and add this app:
#
# INSTALLED_APPS += ('kombu.transport.django', )
# ----------------------------------- Celery Configurations Ends -------------------------------

# ----------------------------------- Logging Configuration -------------------------------
if DEBUG:
    LOG_LEVEL = 'DEBUG'  # 'WARN' for production - have it in local_settings
else:
    LOG_LEVEL = 'WARN'  # only log WARN and ERROR
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'basic': {
            'format': "[%(asctime)s] [%(name)s:%(lineno)s] %(levelname)s: %(message)s",
            # 'datefmt': "%d/%b/%Y %H:%M:%S",
            'datefmt': "%a %b %d %H:%M:%S %Y",  # Apache Date format
        },
        'standard': {
            'format': "[%(asctime)s] [%(levelname)s] [%(name)s:%(lineno)s] %(message)s",
            'datefmt': "%a %b %d %H:%M:%S %Y"
        },
    },
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse',
        },
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'handlers': {
        'file_timed': {
            'level': LOG_LEVEL,
            'class': 'logging.handlers.TimedRotatingFileHandler',
            'filename': BASE_DIR + "/hypernet_errors.log",
            'formatter': 'basic',
            'backupCount': 7,  # a week's log
            'when': 'midnight',
        },
        'file_size': {
            'level': LOG_LEVEL,
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': BASE_DIR + "/hypernet_errors.log",
            'formatter': 'standard',
            'maxBytes': 1024*1024*16,  # 16 MB - 16777216 Bytes
            'backupCount': 10,
        },
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'basic',
            'filters': ['require_debug_true'],  # works only with DEBUG
        },
    },
    'loggers': {
        'hypernet': {
            'handlers': ['file_timed', 'console'],
            'level': LOG_LEVEL,
            # 'propagate': True,  # False for email loggers.
        },
    },
}
# ----------------------------------- Logging Configuration Ends -------------------------------



# ----------------------------------- Firebase Configurations -------------------------------
config_firebase = {
    "apiKey": "AIzaSyBoK0nPXiHvy9ddCS2jdf-lHHkSp4OdXIw",
    "authDomain": "projectId.firebaseapp.com",
    "databaseURL": "https://hypernet-notifications.firebaseio.com/",
    "storageBucket": "projectId.appspot.com",
    "projectId": "hypernet-notifications",
    "messagingSenderId": "766877346878",
}

# ----------------------------------- Firebase Configurations Ends -------------------------------

# CORS_ORIGIN_WHITELIST = (
#     '159.65.7.152',
#     '159.65.7.152:85',
#     '188.166.226.185',
#     'http://localhost:4200'
#     '*'
# )
#------------------------------------x-content-type-----------------------------------------------
SECURE_CONTENT_TYPE_NOSNIFF = True

CRONJOBS = [
    (
    '0 * * * *', 'hypernet.cron_task.make_iop_queue', '>> '  +
        os.path.join(BASE_DIR,"cronlogs/make_iop_queue.log")),

    ('*/1 * * * *', 'hypernet.cron_task.create_appliance_activity',
     '>> ' + os.path.join(BASE_DIR,"cronlogs/create_appliance_activity.log")),

    ('*/1 * * * *', 'hypernet.cron_task.check_sleep_mode',
     '>> '+ os.path.join(BASE_DIR,"cronlogs/check_sleep_mode.log")),

    ('*/1 * * * *', 'hypernet.cron_task.updated_complete_activity',
     '>> ' + os.path.join(BASE_DIR,"cronlogs/updated_complete_activity.log")),

    ('*/1 * * * *', 'iop.crons.crons.appliance_aggregation',
     '>> ' + os.path.join(BASE_DIR,"cronlogs/appliance_aggregation.log")),

    ('*/4 * * * *', 'hypernet.cron_task.process_iop_data',
     '>> ' + os.path.join(BASE_DIR,"cronlogs/process_iop_data.log")),

    ('0 * * * *', 'iop.crons.crons.energy_consumption',
     '>> ' + os.path.join(BASE_DIR,"cronlogs/energy_consumption.log")),

]