from django.db import models
from django.db.models import PROTECT

from hypernet.models import Entity
from user.models import Module
from customer.models import Customer
from options.models import Options

# Create your models here.

class TrainingMetrics(models.Model):
	training_goal = models.CharField(blank=False, null=False, max_length=150)
	player_id = models.ForeignKey(Entity)
	module = models.ForeignKey(Module)
	customer = models.ForeignKey(Customer, null=True)
	start_timestamp = models.DateTimeField(null=False, db_index=True)
	end_timestamp = models.DateTimeField(null=False, db_index=True)
	training_status = models.ForeignKey(Options, on_delete=PROTECT, related_name="training_metrics_status_id")


class SessionMetrics(models.Model):
	session_name = models.CharField(blank=False, null=False, max_length=150)
	training = models.ForeignKey(TrainingMetrics, on_delete=PROTECT)
	duration = models.IntegerField()
	session_type = models.ForeignKey(Options, on_delete=PROTECT, related_name="session_metrics_type_id")
	rpe_rating = models.CharField(blank=True, null=False, max_length=50)
	session_status = models.ForeignKey(Options, on_delete=PROTECT, related_name="session_metrics_status")


class ReportedInjury(models.Model):
	player_id = models.ForeignKey(Entity, related_name="reported_injury_player_id")
	customer = models.ForeignKey(Customer)
	module = models.ForeignKey(Module)
	description = models.CharField(blank=True, null=True, max_length=250)
	injury_geolocation = models.CharField(blank=True, null=True, max_length=250)
	injury_type = models.ForeignKey(Options, on_delete=PROTECT, null=True)
	timestammp = models.DateTimeField(null=False, db_index=True)


class Injury(models.Model):
	player_id = models.ForeignKey(Entity, related_name="injury_player_id")
	reported_injury = models.ForeignKey(ReportedInjury, null=True)
	match_id = models.ForeignKey(Entity, related_name="injury_match_id", null=True)
	competition_id = models.ForeignKey(Entity, related_name="injury_competition_id", null=True)
	customer = models.ForeignKey(Customer)
	module = models.ForeignKey(Module)
	injury_status = models.ForeignKey(Options, on_delete=PROTECT, related_name="injury_status_id", null=True)
	injury_position = models.ForeignKey(Options, on_delete=PROTECT, related_name="injury_position_id", null=True)
	injury_type = models.ForeignKey(Options, on_delete=PROTECT, related_name="injury_type_id", null=True)
	injury_geolocation = models.CharField(blank=True, null=True, max_length=250)
	recovery_time = models.IntegerField()
	backup_substitute = models.ForeignKey(Entity, related_name="injury_backup_player_id", null=True)
	timestammp = models.DateTimeField(null=False, db_index=True)


class MatchDetails(models.Model):
	match = models.ForeignKey(Entity, related_name='match_details_id')
	competition = models.ForeignKey(Entity, related_name="match_competition_id")
	venue = models.ForeignKey(Entity, related_name="match_venue_id")
	match_status = models.ForeignKey(Options, on_delete=PROTECT, related_name="match_status_id")
	home_team_name = models.CharField(blank=True, null=True, max_length=250)
	away_team_name = models.CharField(blank=True, null=True, max_length=250)
	home_team_goals = models.IntegerField()
	away_team_goals = models.IntegerField()
	home_team_shots_on_target = models.IntegerField()
	away_team_shots_on_target = models.IntegerField()
	home_team_shots_off_target = models.IntegerField()
	away_team_shots_off_target = models.IntegerField()
	home_team_interceptions = models.IntegerField()
	away_team_interceptions = models.IntegerField()
	home_team_corners = models.IntegerField()
	away_team_corners = models.IntegerField()
	home_team_passing_accuracy = models.IntegerField()
	away_team_passing_accuracy = models.IntegerField()
	home_team_passes = models.IntegerField()
	away_team_passes = models.IntegerField()
	home_team_assists = models.IntegerField()
	away_team_assists = models.IntegerField()
	home_team_possession = models.IntegerField()
	away_team_possession = models.IntegerField()
	home_team_offsides = models.IntegerField()
	away_team_offsides = models.IntegerField()
	home_team_yellow_cards = models.IntegerField()
	away_team_yellow_cards = models.IntegerField()
	home_team_red_cards = models.IntegerField()
	away_team_red_cards = models.IntegerField()
	home_team_injuries = models.IntegerField()
	away_team_injuries = models.IntegerField()


class TeamDerived(models.Model):
	team = models.ForeignKey(Entity, related_name='team_device_id')
	customer = models.ForeignKey(Customer, null=True)
	module = models.ForeignKey(Module)
	competition = models.ForeignKey(Entity, related_name='team_derived_device_id')
	total_games_played = models.IntegerField(null=True)
	total_wins = models.IntegerField(null=True)
	total_losses = models.IntegerField(null=True)
	total_drawn = models.IntegerField(null=True)
	total_goals_by_team = models.IntegerField(null=True)
	total_goals_against_team = models.IntegerField(null=True)
	total_home_goals = models.IntegerField(null=True)
	total_away_goals = models.IntegerField(null=True)

class PlayerDerived(models.Model):
	player = models.ForeignKey(Entity, related_name='player_derived_device_id')
	customer = models.ForeignKey(Customer, null=True)
	competition = models.ForeignKey(Entity, related_name='player_derived_competition_id')
	module = models.ForeignKey(Module)
	goals = models.IntegerField(null=True)
	assists = models.IntegerField(null=True)
	chances_created = models.IntegerField(null=True)
	passes = models.IntegerField(null=True)
	wins = models.IntegerField()
	losses = models.IntegerField()
	yellow_cards = models.IntegerField()
	red_cards = models.IntegerField()
	player_of_month = models.IntegerField(null=True)
	player_rating = models.IntegerField()
	trainings_completed = models.IntegerField()

## Questionable metrics....
	##############################
	# training_completion_rate_per_month = models.IntegerField(null=True)
	# training_completed_per_week = models.IntegerField(null=True)
	# training_added_per_week = models.IntegerField(null=True)
	# average_training_duration = models.IntegerField(null=True)


class PlayerPerformanceStats(models.Model):
	player = models.ForeignKey(Entity, related_name='player_stats_device_id')
	match = models.ForeignKey(Entity, related_name='match_stats_device_id')
	team = models.ForeignKey(Entity, related_name='team_stats_device_id')
	competition = models.ForeignKey(Entity, related_name='competition_stats_device_id')
	customer = models.ForeignKey(Customer, null=True)
	module = models.ForeignKey(Module)
	timestamp = models.DateTimeField(null=False, db_index=True)
	home_team_name = models.CharField(blank=True, null=False, max_length=50)      #Should be one field instead of two? i.e: home_or_away
	away_team_name = models.CharField(blank=True, null=False, max_length=50)
	pass_back_zone_inaccurate = models.IntegerField()
	dispossessed = models.IntegerField()
	keeper_claim_high_won = models.IntegerField()
	short_pass_inaccurate = models.IntegerField()
	mins_played = models.IntegerField()
	pass_corner_accurate = models.IntegerField()
	sub_on = models.IntegerField()
	save_hands = models.IntegerField()
	ball_recovery = models.IntegerField()
	pass_right = models.IntegerField()
	assist = models.IntegerField()
	pass_left = models.IntegerField()
	keeper_save_in_the_box = models.IntegerField()
	offensive_duel = models.IntegerField()
	clearance_effective = models.IntegerField()
	save_penalty_area = models.IntegerField()
	overrun = models.IntegerField()
	key_pass_long = models.IntegerField()
	pass_accurate = models.IntegerField()
	shot_on_target = models.IntegerField()
	pass_forward = models.IntegerField()
	close_miss_left = models.IntegerField()
	outfielder_blocked_pass = models.IntegerField()
	assist_cross = models.IntegerField()
	goal_left_foot = models.IntegerField()
	goal_counter = models.IntegerField()
	key_pass_other = models.IntegerField()
	touches = models.IntegerField()
	shot_six_yard_box = models.IntegerField()
	clearance_head = models.IntegerField()
	goal_six_yard_box = models.IntegerField()
	shot_penalty_area = models.IntegerField()
	key_pass_throughball = models.IntegerField()
	duel_aerial_lost = models.IntegerField()
	shot_off_target = models.IntegerField()
	man_of_the_match = models.BooleanField(default=False)
	shot_off_target_inside_box = models.IntegerField()
	challenge_lost = models.IntegerField()
	big_chance_created = models.IntegerField()
	pass_key = models.IntegerField()
	punches = models.IntegerField()
	pass_corner_inaccurate = models.IntegerField()
	sub_off = models.IntegerField()
	offside_given = models.IntegerField()
	six_yard_block = models.IntegerField()
	duel_aerial_won = models.IntegerField()
	pass_freekick = models.IntegerField()
	pass_forward_zone_accurate = models.IntegerField()
	outfielder_block = models.IntegerField()
	keeper_diving_save = models.IntegerField()
	shot_counter = models.IntegerField()
	interception_all = models.IntegerField()
	shots_total = models.IntegerField()
	shot_head = models.IntegerField()
	defensive_third = models.IntegerField()
	short_pass_accurate = models.IntegerField()
	pass_corner = models.IntegerField()
	tackle_won = models.IntegerField()
	clearance_total = models.IntegerField()
	turnover = models.IntegerField()
	goal_penalty_area = models.IntegerField()
	intentional_assist = models.IntegerField()
	tackle_lost = models.IntegerField()
	pass_head = models.IntegerField()
	corner_awarded = models.IntegerField()
	dribble_won = models.IntegerField()
	defensive_duel = models.IntegerField()
	possession = models.IntegerField()
	pass_through_ball_accurate = models.IntegerField()
	foul_given = models.IntegerField()
	pass_chipped = models.IntegerField()
	parried_danger = models.IntegerField()
	dribble_lost = models.IntegerField()
	yellow_card = models.IntegerField()
	red_card = models.IntegerField()
	standing_save = models.IntegerField()
	shot_open_play = models.IntegerField()
	successful_final_third_passes = models.IntegerField()
	shot_left_foot = models.IntegerField()
	key_pass_short = models.IntegerField()
	foul_committed = models.IntegerField()
	pass_cross_accurate = models.IntegerField()
	shot_right_foot = models.IntegerField()
	interception_won = models.IntegerField()
	offside_provoked = models.IntegerField()
	shot_set_piece = models.IntegerField()
	goal_normal = models.IntegerField()
	shot_blocked = models.IntegerField()
	keeper_save_total = models.IntegerField()
	mid_third = models.IntegerField()
	final_third = models.IntegerField()
	goal_open_play = models.IntegerField()
	goal_head = models.IntegerField()
	pass_freekick_accurate = models.IntegerField()
	pass_back = models.IntegerField()
	close_miss_right = models.IntegerField()
	keeper_smother = models.IntegerField()
	parried_safe = models.IntegerField()
	pass_long_ball_accurate = models.IntegerField()
	throw_in = models.IntegerField()
	big_chance_missed = models.IntegerField()
	key_pass_cross = models.IntegerField()
	pass_cross_inaccurate = models.IntegerField()
	pass_long_ball_inaccurate = models.IntegerField()
	pass_inaccurate = models.IntegerField()
	filed_reports = models.IntegerField()
	performance_index_of_player = models.IntegerField()


class PlayerProcessed(models.Model):
	player = models.ForeignKey(Entity)
	customer = models.ForeignKey(Customer, null=True)
	module = models.ForeignKey(Module)
	sleep_efficiency = models.IntegerField()
	#Number of minutes to be stored in sleep latency
	sleep_latency= models.IntegerField()
	sleep_period= models.IntegerField()
	sleepPositionChanges= models.IntegerField()
	sleepTotalTime= models.IntegerField()
	activity_value= models.IntegerField()
	activity_avg= models.IntegerField()
	activity_max= models.IntegerField()
	activity_min= models.IntegerField()
	sleepNonREMTime= models.TimeField()
	sleepREMTime= models.TimeField()
	sleepWakeTime= models.TimeField()
	speed_avg= models.IntegerField()
	speed_max = models.IntegerField()
	step_count = models.IntegerField()
	calories_max = models.IntegerField()
	calories_min = models.IntegerField()
	speed_value  = models.IntegerField()
	ASDNN = models.IntegerField()
	AVNN = models.IntegerField()
	HRVHF_avg = models.IntegerField()
	HRVHFnorm_avg = models.IntegerField()
	HRVHFnorm_max = models.IntegerField()
	HRVHFnorm_min = models.IntegerField()
	energy_avg = models.IntegerField()
	energy_max = models.IntegerField()
	energy_min = models.IntegerField()
	energy_total = models.IntegerField()
	calories_burnt = models.IntegerField()
	heartrate_avg = models.IntegerField()
	heartrate_max = models.IntegerField()
	heartrate_min = models.IntegerField()
	intensity = models.IntegerField()
	vo2_avg = models.IntegerField()
	vo2_min_value = models.IntegerField()
	vo2_max_value = models.IntegerField()
	fitness_index_of_player = models.IntegerField()
	vo2_value = models.IntegerField()
	timestamp = models.DateTimeField(db_index=True)